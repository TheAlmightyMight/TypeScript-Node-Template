{
	"$schema": "https://json.schemastore.org/tsconfig",
	"display": "Node 18",
	"compilerOptions": {
		/* Visit https://aka.ms/tsconfig to read more about this file */

		/* Projects */
		"incremental": true /* Save .tsbuildinfo files to allow for incremental compilation of projects. */,
		"tsBuildInfoFile": "./dist/.tsbuildinfo" /* Specify the path to .tsbuildinfo incremental compilation file. */,

		/* Language and Environment */
		"target": "ESNext" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
		"lib": [] /* Specify a set of bundled library declaration files that describe the target runtime environment. */,
		"experimentalDecorators": true /* Enable experimental support for TC39 stage 2 draft decorators. */,
		"moduleDetection": "force" /* Control what method is used to detect module-format JS files. */,

		/* Modules */
		"module": "ESNext",
		"rootDir": "./" /* Specify the root folder within your source files. */,
		"moduleResolution": "node" /* Specify how TypeScript looks up a file from a given module specifier. */,

		/* JavaScript Support */
		"allowJs": true /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */,
		"checkJs": false /* Enable error reporting in type-checked JavaScript files. */,
		"maxNodeModuleJsDepth": 0 /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */,

		/* Emit */
		"declaration": false /* Generate .d.ts files from TypeScript and JavaScript files in your project. */,
		"outDir": "./dist" /* Specify an output folder for all emitted files. */,
		"removeComments": true /* Disable emitting comments. */,
		"importsNotUsedAsValues": "remove" /* Specify emit/checking behavior for imports that are only used for types. */,
		"noEmitOnError": true /* Disable emitting files if any type checking errors are reported. */,
		// "sourceMap": true /* Create source map files for emitted JavaScript files. */,

		/* Interop Constraints */
		"forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,
		"esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
		"isolatedModules": true /* Ensure that each file can be safely transpiled without relying on other imports. */,

		/* Type Checking */
		"strict": true /* Enable all strict type-checking options. */,
		"noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied 'any' type. */,
		"strictNullChecks": true /* When type checking, take into account 'null' and 'undefined'. */,
		"strictFunctionTypes": true /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,
		"strictBindCallApply": true /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */,
		"noImplicitThis": true /* Enable error reporting when 'this' is given the type 'any'. */,
		"useUnknownInCatchVariables": true /* Default catch clause variables as 'unknown' instead of 'any'. */,
		"alwaysStrict": true /* Ensure 'use strict' is always emitted. */,
		"noImplicitReturns": true /* Enable error reporting for codepaths that do not explicitly return in a function. */,
		"noFallthroughCasesInSwitch": true /* Enable error reporting for fallthrough cases in switch statements. */,
		"noUncheckedIndexedAccess": true /* Add 'undefined' to a type when accessed using an index. */,
		"noImplicitOverride": true /* Ensure overriding members in derived classes are marked with an override modifier. */,
		"allowUnusedLabels": true /* Disable error reporting for unused labels. */,
		"allowUnreachableCode": false /* Disable error reporting for unreachable code. */,
		"noPropertyAccessFromIndexSignature": false /* Enforces using indexed accessors for keys declared using an indexed type. */,
		"exactOptionalPropertyTypes": true /* Interpret optional property types as written, rather than adding 'undefined'. */,
		"strictPropertyInitialization": true /* Check for class properties that are declared but not set in the constructor. */,

		/* Too irritating to deal with when in development, turn on when needed */
		"noUnusedLocals": false /* Enable error reporting when local variables aren't read. */,
		"noUnusedParameters": false /* Raise an error when a function parameter isn't read. */,

		/* Completeness */
		"skipDefaultLibCheck": true /* Skip type checking .d.ts files that are included with TypeScript. */,
		"skipLibCheck": true /* Skip type checking all .d.ts files. */,
		"typeRoots": ["./types/"]
	},

	"exclude": ["__tests__", "dist", "jest.*.*"],

	"ts-node": {
		"esm": true,
		"experimentalSpecifierResolution": "node"
	}
}
